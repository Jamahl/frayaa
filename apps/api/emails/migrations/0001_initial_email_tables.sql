-- Create email_sync_status table
drop table if exists public.email_sync_status cascade;
create table public.email_sync_status (
  user_id uuid not null primary key references auth.users(id) on delete cascade,
  last_processed_at timestamptz,
  created_at timestamptz default timezone('utc'::text, now()) not null,
  updated_at timestamptz default timezone('utc'::text, now()) not null
);

-- Enable RLS on email_sync_status
alter table public.email_sync_status enable row level security;

-- Create policies for email_sync_status
create policy "Users can view their own sync status"
on public.email_sync_status for select
using (auth.uid() = user_id);

create policy "Users can update their own sync status"
on public.email_sync_status for update
using (auth.uid() = user_id);

-- Create emails table
drop table if exists public.emails cascade;
create table public.emails (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  gmail_message_id text not null,
  thread_id text,
  from_email text not null,
  to_email text not null,
  subject text not null,
  snippet text,
  received_at timestamptz not null,
  is_read boolean default false,
  labels text[],
  raw_headers jsonb,
  created_at timestamptz default timezone('utc'::text, now()) not null,
  updated_at timestamptz default timezone('utc'::text, now()) not null,
  unique(gmail_message_id, user_id)
);

-- Create index for faster lookups
create index idx_emails_user_id on public.emails(user_id);
create index idx_emails_received_at on public.emails(received_at);

-- Enable RLS on emails
alter table public.emails enable row level security;

-- Create policies for emails
create policy "Users can view their own emails"
on public.emails for select
using (auth.uid() = user_id);

create policy "Users can insert their own emails"
on public.emails for insert
with check (auth.uid() = user_id);

create policy "Users can update their own emails"
on public.emails for update
using (auth.uid() = user_id);

-- Create a function to update the updated_at column
create or replace function public.update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

-- Create triggers to update updated_at
create trigger update_email_sync_status_updated_at
before update on public.email_sync_status
for each row
execute function public.update_updated_at_column();

create trigger update_emails_updated_at
before update on public.emails
for each row
execute function public.update_updated_at_column();
